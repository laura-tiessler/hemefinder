from typing import List

import numpy as np


def grid(centroid, radius, step) -> List[np.ndarray]:
    """
    Generates a list of points that will be used as probes to test coordination.
    A spherical grid of equiseparated points (i.e. probes) is constructed aimed
    to contain the whole biological system (or a zone of it in case of user
    request). The `centroid` and `radius` parameters of the method are obtained
    either when parsing the input `.pdb` file (grid containing the whole
    molecule) or entered by the user with `--center` and `--radius` parameters
    of the program (only this zone of the molecule will be explored). The `step`
    parameter determines the distance between points of the grid.
    Parameters
    ----------
    centroid : array_like
        Array of 3 floats defining the center of the sphere
    radius : float
        Radius of the sphere used to construct the grid
    step : float
        Distance, in Angstroms, between two consecutive probes
    Returns
    -------
    list of array_like
        list of 3-float arrays containing the points (i.e. probes) of the grid
    """
    # 1. Two points at the ends of a cube of l=2*radius are obtained
    xmi, ymi, zmi = centroid - radius
    xma, yma, zma = centroid + radius

    # 2. Each axis x, y and z is splitted at every step distance
    numx = int((xma - xmi) / step) + 1
    numy = int((yma - ymi) / step) + 1
    numz = int((zma - zmi) / step) + 1
    x = np.linspace(xmi, xma, numx)
    y = np.linspace(ymi, yma, numy)
    z = np.linspace(zmi, zma, numz)

    # 3. A cubic grid is generated by iterating over the 3 axes
    grid = []
    for i in range(len(x)):
        for j in range(len(y)):
            for k in range(len(z)):
                grid.append([x[i], y[j], z[k]])
    points = np.array(grid)  # Cube embedding the protein

    # 4. Points out of the sphere are discarded
    is_in_sphere = np.linalg.norm(points - centroid, axis=1) <= radius
    points = points[is_in_sphere, :]

    return points
